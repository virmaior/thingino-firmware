#!/bin/sh

if [ "$0" = "-sh" ]; then
	echo "Do not run directly!" >&2
	return
fi

ENV_DUMP_FILE="/tmp/environment"
if [ -f "$ENV_DUMP_FILE" ]; then
#	echo "Evaluating $ENV_DUMP_FILE" >&2
	. "$ENV_DUMP_FILE"
fi

CONFIG_FILE="/etc/web.conf"
if [ -f "$CONFIG_FILE" ]; then
#	echo "Evaluating $CONFIG_FILE" >&2
	. "$CONFIG_FILE"
fi

PID=$$

CRONTABS="/etc/cron/crontabs/root"
CURL="curl --show-error --fail --connect-timeout 10 --max-time 30 --retry 3"
EMAIL_FORMAT='^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'
FILE_HOSTNAME="/etc/hostname"
FILE_HOSTS="/etc/hosts"
FILE_OS_RELEASE="/etc/os-release"
LOG_FILE="/tmp/webui.log"
LOG_SIZE_LIMIT=50000
NTP_DEFAULT_FILE="/etc/default/ntp.conf"
NTP_WORKING_FILE="/tmp/ntp.conf"
RESOLV_DEFAULT_FILE="/etc/default/resolv.conf"
RESOLV_FILE="/etc/resolv.conf"
RESOLV_WORKING_FILE="/tmp/resolv.conf"
SOC_FAMILY=$(soc -f)
SOC_MODEL=$(soc -m)
SNAPSHOT_FILE="/tmp/snapshot.jpg"
TZNAME_FILE="/etc/timezone"
TZCODE_FILE="/etc/TZ"
TZJSON_FILE="/usr/share/tz.json.gz"
VBUFFER_FILE="/tmp/vbuffer.mov"

DAEMON=${DAEMON:-$0}
DAEMON_ARGS=${DAEMON_ARGS:-}
DAEMON_PATH="/bin"
DAEMON_SHORT=$(basename "${DAEMON%% *}" | sed -r 's/^[FKS]\d{2}//')
DAEMON_FULL="$(which $DAEMON_SHORT)"
PIDFILE="/run/$DAEMON_SHORT.pid"

LOCK_FILE="/run/process-$PID.pid"

DAEMON_CONFIG="/etc/default/$DAEMON_SHORT"
if [ -r "$DAEMON_CONFIG" ]; then
#	echo "Evaluating $DAEMON_CONFIG" >&2
	. "$DAEMON_CONFIG"
fi

decrement_mac() {
	local mac last_byte_dec

	mac=$ethaddr
	if [ -z "$mac" ]; then
		echo "Error: MAC address not found in $CONFIG_FILE" >&2
		exit 1
	fi

	last_byte_dec=$((0x${mac##*:} - 1))
	if [ $last_byte_dec -lt 0 ]; then
		echo "Error: MAC address cannot be decremented below 00" >&2
		exit 1
	fi
	ethaddr=$(printf "%s:%02x" "${mac%:*}" "$last_byte_dec")
}

die() {
	echo "$1" >&2
	exit 1
}

ensure_command() {
	if ! command -v "$1" > /dev/null; then
		echo "Missing $1" >&2
		exit 1
	fi
}

gpio_control() {
	gpio_name="$1"
	gpio_power="$(grep ^${gpio_name}= $CONFIG_FILE | cut -d= -f2)"

	if [ -z "$gpio_power" ]; then
		return 1  # no value
	fi

	num=${gpio_power%[oO]}
	state=${gpio_power#$num}

	case "$state" in
		O)
			gpio_cmd="high"
			;;
		o)
			gpio_cmd="low"
			;;
		*)
			echo "Invalid state for GPIO $gpio_name: $state" >&2
			return 2  # invalid state
			;;
	esac

	echo "Set GPIO $num $gpio_cmd" >&2
	gpio $gpio_cmd $num 2>&1 && return 0  # success

	echo "Failed to set GPIO $num $gpio_cmd" >&2
	return 3  # failure
}

iface_default() {
	local iface

	[ -z "$iface" ] && iface=$(ip -4 r | awk '/default/{print $5; exit}')
	[ -z "$iface" ] && iface=$(ip -4 r | awk '{print $3; exit}')
	[ -z "$iface" ] && iface=$(ip -6 r | awk '/default/{print $5; exit}')
	[ -z "$iface" ] && iface=$(ip -6 r | awk '{print $3; exit}')

	# to stdout
	echo "$iface"
}

iface_default2() {
	ipv4_iface=$(ip -4 r | sed -nE '/default/s/.+dev (\w+).+?/\1/p' | head -n 1)
	if [ -n "$ipv4_iface" ]; then
		# to stdout
		echo "$ipv4_iface"
	else
		ip -6 r | sed -nE '/default/s/.+dev (\w+).+?/\1/p' | head -n 1
	fi
}

iface_exists() {
	iface="$1"

	if [ -z "$iface" ]; then
		echo "Interface parameter missing." >&2
		return 1
	fi

	if ip link show $iface &> /dev/null; then
		if [ "eth0" = $iface ] && ! is_gateway_reachable; then
			echo "eth0 has no local connection" >&2
			return 1
		fi

		# echo "Interface '$iface' exists." >&2
		return 0
	else
		echo "Interface '$iface' does not exist." >&2
		return 1
	fi
}

is_debug_mode() {
	[ $((0 + debug)) -gt 0 ] || [ "true" = "$debug" ]
}

is_streamer_disabled() {
	[ "true" = "$disable_streamer" ] || [ -f /run/portal_mode ]
}

is_streamer_running() {
	pidof prudynt > /dev/null
}

is_gateway_reachable() {
	[ -z "$iface" ] && return 1
	ping -c 1 -W 1 -I $iface $(ip -4 route | grep $iface | grep default | awk '{print $3}') > /dev/null 2>&1 || \
	ping -6 -c 1 -W 1 -I $iface $(ip -6 route | grep $iface | grep default | awk '{print $3}') > /dev/null 2>&1
}

log() {
	logger -p daemon.info -t ${DAEMON_SHORT}[$$] <&0
}

log_to_file() {
	# poor man's logrotate
	if [ -f $LOG_FILE ] && [ "$(stat -c%s $LOG_FILE)" -gt $LOG_SIZE_LIMIT ]; then
		# redundant, but calling log() from within log() is wrong!
		echo "$(tag) Rotate log file" >> $LOG_FILE
		mv "$LOG_FILE" "${LOG_FILE}.1"
		echo "$(tag) Log file rotated." >> $LOG_FILE
	fi

	# log to file
	echo -e "$(tag) $1" >> $LOG_FILE

	# log to console
	echo -e "$1" >&2
}

play_sound() {
	iac -f /usr/share/sounds/$1
}

print_release() {
	if [ ! -f "$FILE_OS_RELEASE" ]; then
		echo "$FILE_OS_RELEASE not found" >&2
		return 1
	fi

	. "$FILE_OS_RELEASE"

	# to stdout
	echo_c 208 "Thingino $IMAGE_ID [$BUILD_ID]\n"
	echo "Thingino $IMAGE_ID [$BUILD_ID]"
}

quit() {
	echo "$1" >&2
	exit 0
}

refresh_env_dump() {
	fw_printenv | sort | sed -E 's/=(.*)$/="\1"/' > "$ENV_DUMP_FILE"
}

set_gpio() {
	echo "Set GPIO $1 to F$2 D$3" >&2
	gpio-diag $1 func $2 drive $3
}

singleton() {
	local name

	name=$(basename $1)
	pids=$(pidof -o %PPID $name > /dev/null)
	if [ -n "$pids" ] ; then
		echo "$name is already running with PIDs $pids. Exiting." >&2
		exit 1
	fi
}

start_daemon() {
	local command

	command="${COMMAND:-$DAEMON_FULL} -- $DAEMON_ARGS"
	if [ -n "$PIDFILE" ] && [ -f "$PIDFILE" ]; then
		start-stop-daemon -b -S -m -p $PIDFILE -x $command 2>&1
	else
		start-stop-daemon -b -S -x $command 2>&1
	fi
}

starting() {
	echo "Starting ${1:-$DAEMON_SHORT}..."
}

stop_daemon() {
	if [ -f "$PIDFILE" ]; then
		echo "- Stopping $DAEMON_SHORT by PID from $PIDFILE"
		start-stop-daemon -K -p $PIDFILE
		[ -f "$PIDFILE" ] && rm "$PIDFILE"
	fi

	sleep 0.2
	if pidof $DAEMON_SHORT > /dev/null; then
		echo "- Killing $DAEMON_SHORT by PID"
		start-stop-daemon -K -n $DAEMON_SHORT
	fi

	sleep 0.2
	if pidof $DAEMON_SHORT > /dev/null; then
		echo "- Killing $DAEMON_SHORT by name"
		start-stop-daemon -K -s SIGKILL -n $DAEMON_SHORT
	fi
	sleep 0.2
	if pidof $DAEMON_SHORT > /dev/null; then
		echo "- Killing $DAEMON_SHORT by full process name $DAEMON_FULL"
		start-stop-daemon -K -x $DAEMON_FULL
	fi
}

stopping() {
	echo "Stopping ${1:-$DAEMON_SHORT}..."
}

tag() {
	echo "$(ts) [$PID:$plugin]"
}

ts() {
	date +"%F %T"
}
