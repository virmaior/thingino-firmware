#!/bin/env sh

die() { echo "$1" >&2; exit 1; }

pidof -o %PPID $(basename $0) > /dev/null && die "is already running"

command -v jsonfilter > /dev/null || die "Missing jsonfilter"

CONFIG_FILE="/etc/web.conf"
[ -f "$CONFIG_FILE" ] && . "$CONFIG_FILE"

[ -z "$telegrambot_token" ] && die "Telegram Bot token is not set"

API_URL="https://api.telegram.org/bot$telegrambot_token"
MSG_TIMEOUT=5
JSDATA_FILE="/tmp/telegrambot.json"
OFFSET_TEMP="/tmp/telegrambot.offset"
OFFSET_STOR="/etc/webui/telegrambot.offset"
IFS_ORIG=$IFS

bot_keyboard=""
bot_commands=""

[ "-v" = "$1" ] && verbosity="--verbose" || verbosity="--silent"

### Common methods
build_menu() {
	bot_commands="["
	bot_keyboard="{\"keyboard\":[["
	#bot_keyboard="{\"inline_keyboard\":[["
	local i
	for i in $(seq 0 9); do
		eval c=\"\$telegrambot_command_$i\"
		[ -z "$c" ] && continue
		eval d=\"\$telegrambot_description_$i\"
		eval s=\"\$telegrambot_script_$i\"
		bot_commands="${bot_commands}{\"command\":\"$c\",\"description\":\"$d\"},"
		bot_keyboard="$bot_keyboard\"/$c\","
		#bot_keyboard="${bot_keyboard}{\"text\":\"$c\",\"callback_data\":\"$s\"},"
	done
	bot_commands="$bot_commands{\"command\":\"help\",\"description\":\"Help\"}]"
	bot_keyboard="$bot_keyboard]],\"one_time_keyboard\":true,\"resize_keyboard\":true}"
}

save_offset() {
	[ -f $OFFSET_TEMP ] && cp $OFFSET_TEMP $OFFSET_STOR && sync
}

restore_offset() {
	[ -f $OFFSET_STOR ] && cp $OFFSET_STOR $OFFSET_TEMP
}

json_data() {
	jsonfilter -i $JSDATA_FILE -e "$1"
}

#### Telegram API

api_call() {
	[ -f $JSDATA_FILE ] && rm $JSDATA_FILE
	echo_c 11 "$1"
	local tmpfile=$(mktemp -u)
	echo "$2" > $tmpfile
	echo_c 14 "$(cat $tmpfile)"
	curl $verbosity --show-error --fail \
		--connect-timeout 10 --max-time 30 --retry 3 \
		--url "$API_URL/$1" -H "Content-Type: application/json" \
		--data-binary "@$tmpfile" \
		--output $JSDATA_FILE
	rm $tmpfile
	echo_c 13 "$(cat $JSDATA_FILE)"
}

### Bot actions

get_me() {
	api_call "getMe" "{\"timeout\":$MSG_TIMEOUT}"
	ME="@$(json_data "$.result.username")"
	echo_c 33 "Starting Telegram Bot $ME"
}

leave_chat() {
	api_call "leaveChat" "{\"chat_id\":\"$1\"}"
}

### Commands menu

get_my_commands() {
	api_call "getMyCommands"
}

delete_my_commands() {
	api_call "deleteMyCommands"
}

set_my_commands() {
	api_call "setMyCommands" "{\"commands\":$bot_commands}"
}

set_chat_menu_button() {
	api_call "setChatMenuButton" "{\"menu_button\":'{\"type\":\"commands\"}'}"
}

show_menu() {
	local data="{\"chat_id\":\"$1\",\"text\":\"Here you go\""
	[ -n "$2" ] && data="$data,\"reply_to_message_id\":\"$2\""
	case "$chat_type" in
		channel | group | private | supergroup)
			data="$data,\"reply_markup\":$bot_keyboard" ;;
	esac
	data="$data}"
	api_call "sendMessage" "$data"
}

### Updates

get_updates() {
	# Available types of update:
	# - message
	# - edited_message
	# - channel_post
	# - edited_channel_post
	# - inline_query
	# - chosen_inline_result
	# - callback_query
	# - shipping_query
	# - pre_checkout_query
	# - poll
	# - poll_answer
	# - my_chat_member
	# - chat_member
	# - chat_join_request

	[ -f $OFFSET_TEMP ] || echo 0 > $OFFSET_TEMP
	api_call "getUpdates" "{\"offset\":\"$(cat $OFFSET_TEMP)\",\"timeout\":$MSG_TIMEOUT,\"allowed_updates\":[\"message\",\"channel_post\"]}"
}

send_message() {
	api_call "sendMessage" "{\"chat_id\":\"$1\",\"text\":\"$2\",\"reply_to_message_id\":\"$3\"}"
}

delete_message() {
	api_call "deleteMessage" "{\"chat_id\":\"$1\",\"message_id\":\"$2\"}"
}

tgb_readfromapi() {
	jsonfilter -s "$updates" -e "$.result[@.update_id=$update_id].message.chat.id"
}

### Logics

build_menu
restore_offset
get_me
delete_my_commands
set_my_commands
#get_my_commands
#set_chat_menu_button

trap "delete_my_commands;exit" 1 2 3 6 14 15

while :; do
	sleep $((MSG_TIMEOUT / 2))

	get_updates
	[ "true" = "$(json_data "$.ok")" ] || continue

	update_ids=$(json_data "$.result[*].update_id")
	[ -z "$update_ids" ] && continue

	for update_id in $update_ids; do
		bot_command=""
		chat_id=""
		chat_type=""
		mention=""
		message=""
		message_id=""
		message_text=""
		script=""

		next_id=$((update_id + 1))
		echo $next_id > $OFFSET_TEMP

		[ -z "$(json_data "$.result[@.update_id=$update_id].*.entities")" ] && continue
		entities=$(json_data "$.result[@.update_id=$update_id].*.entities[*]")

		IFS=$'\n'

		for entity in $entities; do
			sender=$(json_data "$.result[@.update_id=$update_id].*.from.username")
			chat_id=$(json_data "$.result[@.update_id=$update_id].*.chat.id")
			chat_type=$(json_data "$.result[@.update_id=$update_id].*.chat.type")
			message_id=$(json_data "$.result[@.update_id=$update_id].*.message_id")
			message_text=$(json_data "$.result[@.update_id=$update_id].*.text")

			# Available entity types:
			# - mention (@username)
			# - hashtag (#hashtag)
			# - cashtag ($USD)
			# - bot_command (/start@jobs_bot)
			# - url (https://telegram.org)
			# - email (do-not-reply@telegram.org)
			# - phone_number (+1-212-555-0123)
			# - bold (bold text)
			# - italic (italic text)
			# - underline (underlined text)
			# - strikethrough (strikethrough text)
			# - spoiler (spoiler message)
			# - code (monowidth string)
			# - pre (monowidth block)
			# - text_link (for clickable text URLs)
			# - text_mention‚Äù (for users without usernames)
			# - custom_emoji (for inline custom emoji stickers)

			# check sender against whitelist
			if ! echo "$telegrambot_users" | grep -qw "$sender"; then
				echo "You are not my daddy, @$sender!"
				continue
			fi

			if [ "bot_command" = "$(jsonfilter -s "$entity" -e "$.type")" ]; then
				bot_command="${message_text:$(jsonfilter -s "$entity" -e "$.offset"):$(jsonfilter -s "$entity" -e "$.length")}"

				# split command by '@' to $command and $mention
				mention=${bot_command##*@}
				if [ "$bot_command" = "$mention" ]; then
					echo "Command $bot_command is global"
				else
					if [ -n "$mention" ] && [ "$ME" != "@$mention" ]; then
						echo "Command $bot_command is not for $ME but for $mention"
						unset bot_command
					else
						bot_command=${bot_command%%@*}
					fi
				fi
			fi
		done
		IFS=$IFS_ORIG

		if [ -n "$bot_command" ]; then
			[ "reboot" = "$bot_command" ] && save_offset
			for i in $(seq 0 9); do
				[ "/$(eval echo \$telegrambot_command_$i)" = "$bot_command" ] || continue
				script="$(eval echo \$telegrambot_script_$i | sed "s/\$chat_id/$chat_id/")"
				message=$(eval $script)
				[ $? -eq 0 ] || message="Execution failed! Please review the command:\n$script\n\nOutput:\n$result"
				break
			done
			[ -n "$message" ] && send_message "$chat_id" "${message//\"/\\\"}" "$message_id"
		fi
	done
done

exit 0
