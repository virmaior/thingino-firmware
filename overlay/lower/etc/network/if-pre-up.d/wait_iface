#!/bin/sh

. /usr/share/common

[ -z "$IFACE" ] && die "IFACE not set"

CONFIG_FILE="/etc/web.conf"
[ -f "$CONFIG_FILE" ] && . "$CONFIG_FILE"

ENV_DUMP_FILE="/tmp/environment"
[ -f $ENV_DUMP_FILE ] && . $ENV_DUMP_FILE

echo
echo "Interface: $IFACE"

SOC_FAMILY=$(soc -f)
SOC_MODEL=$(soc -m)

NFS_IP=$(sed -n '/^[^ ]*:.* \/ nfs.*[ ,]addr=\([0-9.]\+\).*/s//\1/p' /proc/mounts)

RESOLV_DEFAULT="/etc/default/resolv.conf"
RESOLV_WORKING="/tmp/resolv.conf"

set_gpio() {
	echo "Set GPIO $1 to F$2 D$3"
	gpio-diag $1 func $2 drive $3
}

iface_to_vlan_id() {
	echo $1 | sed "s/.*\.0*\([0-9]\+\)$/\1/g"
}

iface_to_raw_device() {
	echo $1 | sed "s/^\(.*\)\.[^.]*/\1/"
}

nfs_iface() {
	[ -n "$NFS_IP" ] && ip route get to "$NFS_IP" | grep -q "dev $1" > /dev/null
}

usb_iface() {
	readlink -f /sys/class/net/$1/device | grep -q "usb" > /dev/null
}

check_wlan() {
	pin_raw=$wlan_device_gpio

	# default to output high
	[ "$pin_raw" = "${pin_raw//[^0-9]/}" ] && pin_raw="${pin_raw}O"

	pin="${pin_raw:0:-1}"
	case "${pin_raw:0-1}" in
		o) pin_hi=0; pin_lo=1 ;;
		O) pin_hi=1; pin_lo=0 ;;
		*) die "Unknown suffix!"
	esac

	if [ -n "$pin" ]; then
		echo "Set GPIO $pin to $pin_hi"
		gpio set $pin $pin_hi

		if [ "bcmdhd" = "$wlan_module" ]; then
			echo "Unexport GPIO pin $pin"
			gpio unexport $pin
		fi
	fi

	case "$wlan_module" in
		8189es | 8189fs | atbm6031 | b43 | bcmdhd | hi3881 | ssv6158)
			# Check if MDIO directory exists
			if [ -d /proc/jz/mdio ]; then
				echo "GMAC is enabled, disabling MSC1..."
			else
				case "$SOC_FAMILY" in
					t10 | t20 | t21 | t30 | t40 | t41)
						echo "Skip GPIO setup for $SOC_MODEL"
						;;
					t23 | t31)
						if [ "$SOC_MODEL" = "t31a" ]; then
							echo "Skip GPIO setup for $SOC_MODEL"
						else
							set_gpio pb08 1 2
							set_gpio pb09 1 1
							set_gpio pb10 1 1
							set_gpio pb11 1 1
							set_gpio pb13 1 1
							set_gpio pb14 1 1
						fi
						;;
					*)
						die "Unsupported SOC type: $SOC_FAMILY"
						;;
				esac

				echo "Send INSERT to MMC1"
				mmc 1
			fi
			;;
		*)
			# MMC1 is not SDIO
			;;
	esac

	if [ "hi3881" = "$wlan_module" ]; then
		MAC_ADDR="$wlan_mac"
		echo "Preset MAC address to $MAC_ADDR"
		sed -i "s/CFG_MAC=[^;]*;/CFG_MAC=$MAC_ADDR;/" /usr/share/wifi/wifi_cfg
	fi

	grep -q "^$wlan_module\b" /proc/modules && rmmod $wlan_module

	echo "Loading $wlan_module $wlan_module_opts"
	modprobe $wlan_module $wlan_module_opts
}

set_mac() {
	case "$1" in
		lo)
			return ;;
		eth0)
			if nfs_iface "$1"; then
				echo "NFS link to $NFS_IP, set manual DNS"
				[ -f "$RESOLV_WORKING" ] && rm -f "$RESOLV_WORKING"
				ln -s /proc/net/pnp "$RESOLV_WORKING"
#			elif usb_iface "$1"; then
#				echo "USB device, use hardware MAC"
			else
				MAC_ADDR=$ethaddr
				[ -z "$MAC_ADDR" ] && echo "No ethaddr in U-Boot environment"
			fi
			;;
		wlan0)
			MAC_ADDR=$wlan_mac
			;;
		*)
			echo "Unknown interface $1"
			return
			;;
	esac

	[ -z "$MAC_ADDR" ] && MAC_ADDR=$(cat /sys/class/net/$1/address)
	[ -z "$MAC_ADDR" ] && MAC_ADDR='00:00:00:00:00:00'

	[ "wlan0" = "$1" ] && [ "hi3881" = "$wlan_module" ] && return

	echo "Set MAC address $MAC_ADDR for $1"
	# FIXME: fails to set repeatedly
	if ip link set dev $1 address $MAC_ADDR; then
		echo "MAC address for $1 set to $MAC_ADDR"
	else
		echo "Failed to set MAC $MAC_ADDR for $1"
	fi
}

set_vlan() {
	case "$1" in
		vlan0*)
			vconfig set_name_type VLAN_PLUS_VID
			VLANID=$(echo $1 | sed "s/vlan0*//")
			;;

		vlan*)
			vconfig set_name_type VLAN_PLUS_VID_NO_PAD
			VLANID=$(echo $1 | sed "s/vlan*//")
			;;

		*.0*)
			vconfig set_name_type DEV_PLUS_VID
			VLANID=$(iface_to_vlan_id $1)
			IF_VLAN_RAW_DEVICE=$(iface_to_raw_device $1)
			;;

		*.*)
			vconfig set_name_type DEV_PLUS_VID_NO_PAD
			VLANID=$(iface_to_vlan_id $1)
			IF_VLAN_RAW_DEVICE=$(iface_to_raw_device $1)
			;;

		*)
			;;
	esac

	if [ -n "$IF_VLAN_RAW_DEVICE" ]; then
		[ -x /sbin/vconfig ] || die "vconfig not found"

		ip link show dev "$IF_VLAN_RAW_DEVICE" > /dev/null ||
			die "Unable to create $1, $IF_VLAN_RAW_DEVICE does not exist"

		ip link set up dev "$IF_VLAN_RAW_DEVICE" || \
			die "Failed to bring up $IF_VLAN_RAW_DEVICE"

		vconfig add "$IF_VLAN_RAW_DEVICE" "$VLANID" || \
			die "Failed to create $1"
	fi

	ip link set qlen 1000 dev "$1"
}

set_wpa_supplicant() {
	if [ "wlan0" != "$1" ]; then
		echo "Skip wpa_supplicant for $1, not wireless"
		return
	fi

	if [ ! -x /sbin/wpa_supplicant ]; then
		echo "wpa_supplicant not found"
		exit 1
	fi

	WPA_CONF="/tmp/wpa_supplicant.conf"
	WPA_PID="/run/wpa_supplicant.$1.pid"

	if [ -z "${wlan_ssid}${wlan_bssid}" ]; then
		echo "WiFi network name missing"
		exit 1
	fi

	if [ -z "$wlan_pass" ]; then
		echo "WiFi network password missing"
		exit 1
	fi

	if [ ${#wlan_pass} -lt 64 ]; then
		echo "Convert plain-text password"

		echo "Create a temporary file"
		tmpfile=$(mktemp)

		echo "Generate wpa_supplicant config in $tmpfile"
		wpa_passphrase "$wlan_ssid" "$wlan_pass" > $tmpfile

		echo "Extract PSK from $tmpfile"
		wlan_psk=$(awk -F= '/\s+psk=/{print $2}' $tmpfile)
		if [ -z "$wlan_psk" ]; then
			echo "PSK Not found. Failed to generate PSK?"
			exit 1
		fi

		echo "Set PSK in U-Boot environment"
		fw_setenv wlan_pass $wlan_psk

		echo "Remove temporary file"
		rm -f $tmpfile
	else
		echo "WiFi password already encrypted"
		wlan_psk=$wlan_pass
	fi

	if [ -f $WPA_CONF ]; then
		echo "Read SSID from $WPA_CONF"
		ssid=$(grep '\bssid=' $WPA_CONF | cut -d= -f2- | tr -d '"')

		echo "Remove existing $WPA_CONF"
		rm -f $WPA_CONF
	fi

#	if [ "$wlan_ssid" != "$ssid" ]; then
		echo "Generate a dummy wpa_supplicant config $WPA_CONF"
		wpa_passphrase "$wlan_ssid" "dummy_password" > $WPA_CONF

		echo "Replace PSK in $WPA_CONF"
		# sed -i "/dummy_password/d" $WPA_CONF
		sed -i "/#/ns/psk=.*$/psk=$wlan_psk/" $WPA_CONF

		if [ -n "$wlan_bssid" ]; then
			sed -i "s/ssid=.*$/bssid=$wlan_bssid/" $WPA_CONF
		else
			sed -i '/}/i\\tscan_ssid=1' $WPA_CONF
		fi
		cat $WPA_CONF
#	fi

	if [ "false" = "$wlanap_disabled" ]; then
		echo "WLAN AP enabled"
		exit 0
	fi

	echo "Start wpa_supplicant"
	wpa_supplicant -B -i $1 -c $WPA_CONF -P $WPA_PID
}

set_bridge() {
	if [ -z "$IF_BRIDGE_PORTS" ]; then
		echo "No bridge ports defined"
		return
	fi

	[ -x /sbin/brctl ] || die "brctl not found"

	case "$IF_BRIDGE_PORTS" in
		none)	INTERFACES="" ;;
		all)	INTERFACES=$(ip link show | grep -o "eth[0-9]\+" | sort -u) ;;
		*)	INTERFACES="$IF_BRIDGE_PORTS" ;;
	esac

	brctl addbr $1 || die "Failed to create bridge $1"

	for iface in $INTERFACES; do
		set_vlan $iface
		brctl addif $1 $iface && ip link set dev $iface up
	done

	brctl stp $1 off
}

wait_for_iface() {
	IFACE_CONTROL_FILE="/sys/class/net/$1"

	[ -e "$IFACE_CONTROL_FILE" ] && return
	[ -z "$IF_WAIT_DELAY" ] && IF_WAIT_DELAY=10

	echo -n "- Waiting for $1 to appear"
	while [ $IF_WAIT_DELAY -gt 0 ]; do
		[ -e "$IFACE_CONTROL_FILE" ] && echo " OK" && return
		sleep 1
		printf "."
		: $((IF_WAIT_DELAY -= 1))
	done
	die " timeout!"

	#m=50 # limit to 5 seconds
	#while [ "$m" -gt 0 ]; do
	#	grep -q wlan0 /proc/net/wireless && break
	#	m=$((m-1))
	#	sleep 0.1
	#done
}

if [ "usb0" = "$IFACE" ]; then
	if ! lsusb | grep -q "LAN"; then
		echo "USB Ethernet device not detected"
		exit 1
	fi
fi

if [ "wlan0" = "$IFACE" ]; then
	echo "WiFi setup"

	# Dump and evaluate wlan settings from U-Boot environment
#	tmpfile=$(mktemp)
#	fw_printenv | grep wlan | sed -E "s/=(.+)$/=\"\1\"/" > $tmpfile
#	. $tmpfile
#	rm -f $tmpfile

#	[ -z "$wlan_module" ] && die "No wlan_module in U-Boot environment"
#	[ -z "$wlan_ssid" ] && die "No wlan_ssid in U-Boot environment"
#	[ -z "$wlan_pass" ] && die "No wlan_pass in U-Boot environment"

	echo "
WiFi module: $wlan_module
WiFi SSID: $wlan_ssid
WiFi password: $wlan_pass
WiFi MAC: $wlan_mac
WiFi AP: $wlanap_disabled
WiFi BSSID: $wlan_bssid
"
	if [ -z "$gpio_wlan" ]; then
		echo "No gpio_wlan in U-Boot environment"
	else
		echo "WiFi GPIO: $gpio_wlan"
		for pin_raw in $gpio_wlan; do
			[ "$pin_raw" = "${pin_raw//[^0-9]/}" ] && pin_raw="${pin_raw}O"
			gpio set "${pin_raw:0:-1}" "${pin_raw:0-1}"
		done
	fi
	echo "WiFi options: $wlan_module_opts"

	check_wlan $IFACE
fi

wait_for_iface $IFACE

if [ "wlan0" = "$IFACE" ]; then
	set_mac	$IFACE
	set_wpa_supplicant $IFACE
fi

set_bridge $IFACE

exit 0
